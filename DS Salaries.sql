SELECT * FROM ds_salaries$

--HELLO, IN TODAY'S PROJECT, WE SHALL BE TACKLING DS SALARIES, WHERE WE SHALL MAKE DO OF SOME HAVING FUNCTIONS AND A COUPLE OF SUBQUERIES TOGETHER WITH WHAT WE HAVE BEEN DOING
--LETS GET RIGHT INTO IT.

--FIRSTLY, WE NEED TO DO A BIT OF TRANSFORMATIONS AND STANDARDIZATIONS, UPDATING AND ALTERING THE TABLE BEFORE MOVING ON TO OUR ANALYSIS

--I WORKED ON TRANSFORMATION THESE THREE COLUMNS, REPLACING THE VALUES FOR A SIMPLE AND EASY UNDERSTANDING
SELECT EXPERIENCE_LEVEL,
CASE
WHEN EXPERIENCE_LEVEL = 'EN' THEN 'ENTRY-LEVEL'
WHEN EXPERIENCE_LEVEL = 'EX' THEN 'EXECUTIVE-LEVEL'
WHEN EXPERIENCE_LEVEL = 'MI' THEN 'MID-LEVEL'
ELSE 'SENIOR-LEVEL'
END AS EXP_LEVEL FROM ds_salaries$



SELECT EMPLOYMENT_TYPE,
CASE
WHEN EMPLOYMENT_TYPE = 'CT' THEN 'CONTRACT'
WHEN EMPLOYMENT_TYPE = 'FL' THEN 'FREELANCER'
WHEN EMPLOYMENT_TYPE = 'FT' THEN 'FULL-TIME'
ELSE 'PART-TIME'
END AS EMP_TYPE
FROM ds_salaries$



SELECT COMPANY_SIZE, 
CASE
WHEN COMPANY_SIZE = 'L' THEN 'LARGE'
WHEN COMPANY_SIZE = 'M' THEN 'MEDIUM'
ELSE 'SMALL'
END AS COMP_SIZE FROM ds_salaries$

--NOW, WE NEED TO ADD THESE NEW COLUMNS SO YHH
ALTER TABLE ds_salaries$
ADD EXP_LEVEL VARCHAR(100)

UPDATE ds_salaries$
SET EXP_LEVEL = CASE
WHEN EXPERIENCE_LEVEL = 'EN' THEN 'ENTRY-LEVEL'
WHEN EXPERIENCE_LEVEL = 'EX' THEN 'EXECUTIVE-LEVEL'
WHEN EXPERIENCE_LEVEL = 'MI' THEN 'MID-LEVEL'
ELSE 'SENIOR-LEVEL'
END

ALTER TABLE ds_salaries$
ADD EMP_TYPE VARCHAR(100)

UPDATE ds_salaries$
SET EMP_TYPE = CASE
WHEN EMPLOYMENT_TYPE = 'CT' THEN 'CONTRACT'
WHEN EMPLOYMENT_TYPE = 'FL' THEN 'FREELANCER'
WHEN EMPLOYMENT_TYPE = 'FT' THEN 'FULL-TIME'
ELSE 'PART-TIME'
END

ALTER TABLE ds_salaries$
ADD COMP_SIZE VARCHAR(100)

UPDATE ds_salaries$
SET COMP_SIZE = CASE
WHEN COMPANY_SIZE = 'L' THEN 'LARGE'
WHEN COMPANY_SIZE = 'M' THEN 'MEDIUM'
ELSE 'SMALL'
END

SELECT * FROM ds_salaries$

--SEEING THAT THE COLUMNS HAVE BEEN ADDED, WE CAN REMOVE THE TRANSFORMED COLUMNS RIGHT. SO
ALTER TABLE ds_salaries$
DROP COLUMN EXPERIENCE_LEVEL, EMPLOYMENT_TYPE, COMPANY_SIZE

SELECT * FROM ds_salaries$


--OKAY SO HERE, I WANTED TO JUST MAKE THE VALUES AND HEADERS INTO LOWER CASE SO THE TABLE LOOKS ABIT UNIFORM AND BETTER
SELECT EXP_LEVEL, LOWER(EXP_LEVEL) AS Experience_level FROM ds_salaries$
SELECT EMP_TYPE, LOWER(EMP_TYPE) AS Employment_Type from ds_salaries$
SELECT COMP_SIZE, LOWER(COMP_SIZE) AS Company_size from ds_salaries$

ALTER TABLE ds_salaries$
ADD Experience_level VARCHAR(100)

ALTER TABLE ds_salaries$
ADD Employment_Type VARCHAR(100)

ALTER TABLE ds_salaries$
ADD  Company_size VARCHAR(100)

UPDATE ds_salaries$
SET Experience_level = LOWER(EXP_LEVEL)

UPDATE ds_salaries$
SET Employment_Type = LOWER(EMP_TYPE)

UPDATE ds_salaries$
SET Company_size = LOWER(COMP_SIZE)

ALTER TABLE ds_salaries$
DROP COLUMN EXP_LEVEL, EMP_TYPE, COMP_SIZE

SELECT * FROM ds_salaries$

--WE CAN START WITH OUR ANALYSIS AND ANSWERING SOME QUESTIONS NOW BUT BEFORE THAT, i WILL APPRECIATE IF WE CAN REMOVE OR CHECK FOR DUPLICATES FIRST.
WITH SALARY AS (SELECT *, ROW_NUMBER() OVER(PARTITION BY F1, WORK_YEAR, JOB_TITLE, SALARY, SALARY_CURRENCY, SALARY_IN_USD, EMPLOYEE_RESIDENCE, REMOTE_RATIO, COMPANY_LOCATION, EXPERIENCE_LEVEL, EMPLOYMENT_TYPE, COMPANY_SIZE ORDER BY F1) AS ROW_NUM FROM ds_salaries$)
SELECT * FROM SALARY WHERE ROW_NUM > 1

--OKAY SO SEEING THERE ARE NO DUPLICATE VALUES, WE CAN NOW GO AHEAD AND DO OUR ANALYSIS. WHEW
SELECT * FROM ds_salaries$

--QUESTIONS
--FIND THE TOTAL AND AVERAGE EMPLOYEE SALARYIES IN USD
--wHO EARNS THE HIGHEST SALARY IN USD?
--WRITE A QUERY TO FIND THE SECOND HIGHEST EMPLOYEE SALARY
--FIND THE TOTAL SALARY IN USD PER WORK_YEAR
--WRITE A QUERY TO FIND TOTAL SALARY FOR EMPLOYEES WITH DATA ANALYST ONLY AS JOB TITLE
--WRITE A QUERY TO FIND  EMPLOYEES EARNING HIGHER THAN THE AVERAGE SALARY IN USD
--WRITE A QUERY THAT INCREASES THE SALARY BY 20% FOR EMPLOYEES EARNING LESS THAN THE AVERAGE SALARY IN EACH DEPARTMENT
--WRITE A QUERY TO LIST THOSE WHO EARN MORE THAN THE AVERAGE SALARY IN EACH DEPARTMENT
--WRITE A QUERY TO FIND THE TOTAL SALARIES IN USD BY EXPERIENCE LEVEL, EMPLOYMENT_TYPE AND COMPANY_SIZE
--WRITE A QUERY TO FIND WHICH JOB TITLES PAY THE MOST
--2100931128113

SELECT * FROM ds_salaries$
--ANSWERS
--1A. 
SELECT SUM(SALARY_IN_USD) AS TOTAL_SALARY FROM ds_salaries$
--1B. 
SELECT AVG(SALARY_IN_USD) AS AVERAGE_SALARY FROM ds_salaries$

--2.
SELECT TOP 1 JOB_TITLE, EXPERIENCE_LEVEL, EMPLOYMENT_TYPE, COMPANY_SIZE, MAX(SALARY_IN_USD) AS HIGHEST_PAID FROM ds_salaries$
GROUP BY JOB_TITLE, EXPERIENCE_LEVEL, EMPLOYMENT_TYPE, COMPANY_SIZE 
ORDER BY HIGHEST_PAID DESC

--3.
SELECT TOP 1 JOB_TITLE, EXPERIENCE_LEVEL, EMPLOYMENT_TYPE, COMPANY_SIZE, MAX(SALARY_IN_USD) AS SECOND_HIGHEST FROM ds_salaries$
WHERE SALARY_IN_USD < (SELECT MAX(SALARY_IN_USD) FROM ds_salaries$) GROUP BY JOB_TITLE, EXPERIENCE_LEVEL, EMPLOYMENT_TYPE, COMPANY_SIZE
ORDER BY SECOND_HIGHEST DESC

--4.
SELECT DISTINCT WORK_YEAR, SUM(SALARY_IN_USD) AS SALARY_TOTAL FROM ds_salaries$
GROUP BY WORK_YEAR
ORDER BY SALARY_TOTAL DESC

--5.
SELECT SUM(SALARY_IN_USD) AS SALARY FROM ds_salaries$
WHERE JOB_TITLE = 'DATA ANALYST'

--6.
SELECT JOB_TITLE, EMPLOYEE_RESIDENCE, company_size, EMPLOYMENT_TYPE, F1, SALARY_IN_USD FROM ds_salaries$
WHERE SALARY_IN_USD > (SELECT AVG(SALARY_IN_USD) AS SALARY FROM ds_salaries$)

--7.WRITE A QUERY THAT INCREASES THE SALARY BY 20% FOR EMPLOYEES EARNING LESS THAN THE AVERAGE SALARY IN EACH DEPARTMENT
UPDATE ds_salaries$
SET SALARY_IN_USD = SALARY_IN_USD * 1.20 WHERE SALARY_IN_USD < (SELECT AVG(SALARY_IN_USD) FROM ds_salaries$)

--8.A.WRITE A QUERY TO LIST THOSE WHO EARN MORE THAN OR EQUAL TO THE AVERAGE SALARY IN EACH DEPARTMENT
SELECT DISTINCT  JOB_TITLE, F1, EMPLOYMENT_TYPE, COMPANY_SIZE, EXPERIENCE_LEVEL, SALARY_IN_USD FROM ds_salaries$
GROUP BY F1, JOB_TITLE, employment_type, COMPANY_SIZE, EXPERIENCE_LEVEL, SALARY_IN_USD
HAVING SALARY_IN_USD >= (SELECT AVG(SALARY) FROM ds_salaries$)

--8.B.WRITE A QUERY TO LIST THOSE WHO EARN LESS THAN THE AVERAGE SALARY IN EACH DEPARTMENT
SELECT DISTINCT  JOB_TITLE, F1, EMPLOYMENT_TYPE, COMPANY_SIZE, EXPERIENCE_LEVEL, SALARY_IN_USD FROM ds_salaries$
GROUP BY F1, JOB_TITLE, employment_type, COMPANY_SIZE, EXPERIENCE_LEVEL, SALARY_IN_USD
HAVING SALARY_IN_USD < (SELECT AVG(SALARY) FROM ds_salaries$)

--9.A WRITE A QUERY TO FIND THE TOTAL SALARIES IN USD BY EXPERIENCE LEVEL, EMPLOYMENT_TYPE AND COMPANY_SIZE
SELECT EXPERIENCE_LEVEL, SUM(SALARY_IN_USD) AS SALARY FROM ds_salaries$
GROUP BY EXPERIENCE_LEVEL
ORDER BY SALARY DESC

--9B. WRITE A QUERY TO FIND THE TOTAL SALARIES IN USD BY EXPERIENCE LEVEL, EMPLOYMENT_TYPE AND COMPANY_SIZE
SELECT EMPLOYMENT_TYPE, SUM(SALARY_IN_USD) AS SALARY FROM ds_salaries$
GROUP BY EMPLOYMENT_TYPE 
ORDER BY SALARY DESC

--9C. WRITE A QUERY TO FIND THE TOTAL SALARIES IN USD BY EXPERIENCE LEVEL, EMPLOYMENT_TYPE AND COMPANY_SIZE
SELECT COMPANY_SIZE, SUM(SALARY_IN_USD) AS SALARY FROM ds_salaries$
GROUP BY COMPANY_SIZE
ORDER BY SALARY ASC

--10. WRITE A QUERY TO FIND WHICH JOB TITLES PAY THE MOST
SELECT TOP 10 JOB_TITLE, AVG(SALARY_IN_USD) AS AVERAGE_SALARY FROM ds_salaries$
GROUP BY JOB_TITLE
ORDER BY AVERAGE_SALARY DESC

--THANK YOU FOR TAKING THE TIME